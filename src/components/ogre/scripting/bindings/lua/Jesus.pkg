namespace Ember {
namespace OgreView {


class Jesus{

	enum ClickMasks
	{
		CM_MODELBLOCK = 1<<13,
		CM_ATTACHPOINT = 1<<14
	};

    Jesus(Carpenter::Carpenter* carpenter);

    ~Jesus();
	

		
	/**
	 *    Creates a new Model instance for the supplied block type.
	 *    If there's no Model defined for the supplies block type, a null pointer will be returned.
	 * @param blockType 
	 * @param modelName 
	 * @return A Model instance or 0
	 */
	Ember::OgreView::Model::Model* createModelForBlockType(const std::string& blockType,  const std::string& modelName);
	
	
	/**
	 *    Finds the colour associated to the supplied attachpoint. If no colour is registered, a ColourValue of 1,1,1 will be returned
	 * @param point 
	 * @return 
	 */
	Ogre::ColourValue getColourForAttachPoint(const Carpenter::AttachPoint* point) const;
	
	/**
	 *    Accessor for the Carpenter object.
	 * @return 
	 */
	Carpenter::Carpenter* getCarpenter() const;
	
	/**
	 *    adds a blueprint
	 * @param blueprint 
	 * @return false if there's already a blueprint with the same name as the supplied blueprint
	 */
	bool addBluePrint(Carpenter::BluePrint* blueprint);
	
	/**
	 *    returns a blueprint with the supplied name
	 *	  note that the blueprint must already be loaded and added to Jesus with addBluePrint(...)
	 *	  @see addBluePrint(Carpenter::BluePrint*)
	 * @param name 
	 * @return 
	 */
	Carpenter::BluePrint* getBluePrint(const std::string& name) const;
	
	
	inline const std::map<std::string , Carpenter::BluePrint* > * getAllBluePrints() const {return &mBlueprints;}



};


/** This class 'wibbles' the billboard */
class LightWibbler : public Ogre::ControllerValue<Ogre::Real>
{
public:
	LightWibbler(const Ogre::ColourValue& originalColour, Ogre::Billboard* billboard);

	virtual Ogre::Real  getValue (void) const;
	virtual void  setValue (Ogre::Real value);

};


class AttachPointNode
{

	AttachPointNode(ModelBlock* modelBlock, Ogre::SceneNode* modelNode, const Carpenter::AttachPoint* attachPoint, Ogre::ColourValue colour, Ogre::BillboardSet* billboardSet);
	~AttachPointNode();
	void select();
	void deselect();
	const Carpenter::AttachPoint* getAttachPoint();
	

};



class ModelBlock
{

	ModelBlock(Ogre::SceneNode* baseNode, const Carpenter::BuildingBlock* buildingBlock,  Ember::OgreView::Model::Model* model, Construction* construction);
	~ModelBlock();
//	void selectAttachPointNode(AttachPointNode* selectedNode);
	
	const Carpenter::BuildingBlock* getBuildingBlock();
	Construction* getConstruction() const;
	void createAttachPointNodes();
	void select();
	void deselect();
	
	std::vector<AttachPointNode*> getAttachPointNodes() const;
	
	const Ember::OgreView::Model::Model* getModel() const;
	const Ogre::SceneNode* getNode() const;

};


struct ModelMapping
{

	const std::string model;
	const std::string blocktype;
};


class Construction
{

	Construction(Carpenter::BluePrint* blueprint, Jesus* jesus, Ogre::SceneNode* node);
	~Construction();
	Jesus* getJesus() const;
	Carpenter::BluePrint* getBluePrint() const;


	void buildFromBluePrint(bool createAttachPointNodes);

	
	/**
	 *    Creates a new ModelBlock and adds it to the construction.
	 * @param buildingBlock 
	 * @return 
	 */
	ModelBlock* createModelBlock(const Carpenter::BuildingBlock* buildingBlock, bool createAttachPointNodes);
	
	std::vector<ModelBlock*> getModelBlocks() const;
	
	bool remove(ModelBlock* modelBlock);
	

};
}
}
