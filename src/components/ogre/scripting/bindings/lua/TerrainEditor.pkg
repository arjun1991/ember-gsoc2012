$#include "components/ogre/terrain/TerrainEditorOverlay.h"
$#include "components/ogre/terrain/TerrainEditor.h"

//
// C++ Interface: TerrainEditor
//
// Description: 
//
//
// Author: Erik Hjortsberg <erik.hjortsberg@gmail.com>, (C) 2006
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.//
//




namespace Ember {
namespace OgreView {
namespace Terrain {


class BasePointUserObject
{
public: 
	
	const Mercator::BasePoint& getBasePoint() const;
	
	Ogre::SceneNode* getBasePointMarkerNode() const;
	
	const Ember::Domain::TerrainPosition& getPosition() const;
	
	/**
	 *    Gets the current height of the base point.
	 * @return 
	 */
	float getHeight() const;
		
	/**
	 *    Updated the vertical position of the base point.
	 * @param verticalMovement 
	 */
	void translate(float verticalMovement);
	
	/**
	Emitted when the position of the base point has been updated
	*/
	sigc::signal<void> EventUpdatedPosition;
	

};


class TerrainEditAction
{
public:

typedef std::vector<Ember::OgreView::Terrain::TerrainEditBasePointMovement> MovementStore;
const MovementStore& getMovements() const;
MovementStore& getMovements();


};

class TerrainEditBasePointMovement
{

float getVerticalMovement() const;
const Ember::Domain::TerrainPosition& getPosition() const;

};

/**
	@author Erik Hjortsberg <erik.hjortsberg@gmail.com>
*/
class TerrainEditor
{
public:
    TerrainEditor(Ember::OgreView::Terrain::TerrainManager& manager, Ember::OgreView::Camera::MainCamera& camera);

    ~TerrainEditor();

    /**
     * Shows the overlay.
     */
    void showOverlay();
    /**
     * Hides the overlay.
     */
    void hideOverlay();

	/**
	 *    Returns true if the overlay is currently shown.
	 * @return
	 */
	bool isOverlayShown() const;


	sigc::signal<void, Ember::OgreView::Terrain::TerrainEditorOverlay&> EventOverlayCreated;

	/**
	 * @brief Emitted when the overlay instance has been destroyed.
	 */
	sigc::signal<void> EventOverlayDestroyed;


	float getRadius() const;
	void setRadius(float radiusInMeters);


	float getFalloff() const;
	void setFalloff(float falloff);
	
	
};


class TerrainEditorOverlay
{

	/**
	 *    Performs the supplied action on the client terrain. Note that no updates are sent to the server at this point.
	 *    Undo operations are carried out by calls to this method, with the second parameter set to true.
	 * @param the action to commit
	 * @return
	 */
    void commitAction(const Ember::OgreView::Terrain::TerrainEditAction& action);

	/**
	 *    returns the currently selected base point user object, if any
	 * @return
	 */
	Ember::OgreView::Terrain::BasePointUserObject* getCurrentBasePointUserObject() const;

    /**
     * Sends all changes to the server.
     */
    void sendChangesToServer();

	/**
	 *    Creates a new action from the current movement. Will only create an action if actual movement has occurred.
	 * @param alsoCommit if true, the action will also be committed
	 */
	void createAction(bool alsoCommit);

	/**
	 *    Undoes the last action, if there are any.
	 * @return true if there was an action to undo, false if else
	 */
	bool undoLastAction();

	/**
	 *    Redoes an action that was undone.
	 * @return true if there was an already undone action that could be redone, else false
	 */
	bool redoAction();

    /**
    * Emitted when a base point has been picked by the mouse.
    * @param The UserObject of the picked base point.
    */
    sigc::signal<void, Ember::OgreView::Terrain::BasePointUserObject*> EventPickedBasePoint;

    /**
    * Emitted when an TerrainEditAction has been created.
    * @param The newly created TerrainEditAction
    */
    sigc::signal<void, const Ember::OgreView::Terrain::TerrainEditAction*> EventActionCreated;

	/**
	Emitted when the position of the selected base point has been updated
	*/
	sigc::signal<void, Ember::OgreView::Terrain::BasePointUserObject*> EventSelectedBasePointUpdatedPosition;

};

}
}

}
