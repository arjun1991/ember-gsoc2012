$#include "services/serversettings/ServerSettings.h"

namespace Ember {

namespace Services {

/**
 * @author Erik Hjortsberg <erik.hjortsberg@gmail.com>
 * @brief Stores server settings.
 *
 * This service stores settings for each server. It provides a simple interface for querying for existing settings as well as adding new ones.
 * While the settings will be stored to disk when the service shuts down, users are encouraged to call writeToDisk() as soon as any new settings has been added, to guarantee that no settings gets lost in the case of a crash.
 *
 * In order to query about the settings for a specific server an instance of ServerSettingsCredentials. This allows the service to manage server verification and lookup.
 *
 * All server settings are stored in one file, by default "serversettings.conf", to be found in the Ember home directory. Each server is represented by one section in this config file.
 * The mapping between servers and sections is handled by the getSectionForServerCredentials(...) method. This method currently only uses the host name to map servers to config file section, but it might be extended with more complex authentication methods for making sure that the right server is matched to the correct section.
 */
class ServerSettings : public Service
{
public:

	/**
	 * @brief Checks for the existence of a specific key.
	 *
	 * @param credentials The server credentials.
	 * @param key The key to look for.
	 * @returns True of there exists a key value pair for the supplied key.
	 */
	bool findItem(const Ember::Services::ServerSettingsCredentials& credentials, const std::string& key) const;

	/**
	 * @brief Gets a setting with the specified key.
	 *
	 * @param credentials The server credentials.
	 * @param key The key to look for.
	 * @returns The value of the specified key.
	 */
	varconf::Variable getItem(const Ember::Services::ServerSettingsCredentials& credentials, const std::string& key) const;

	/**
	 * @brief Sets an item.
	 *
	 * @param credentials The server credentials.
	 * @param key The key to set.
	 * @param item The value to attach to the key.
	 */
	void setItem(const Ember::Services::ServerSettingsCredentials& credentials, const std::string& key, const varconf::Variable& item);

	/**
	 * @brief Erases an item.
	 *
	 * @param credentials The server credentials.
	 * @param key The key to erase.
	 * @returns True if a key could be found and erased.
	 */
	bool eraseItem(const Ember::Services::ServerSettingsCredentials& credentials, const std::string& key);

	/**
	 * @brief Gets all settings for a server.
	 *
	 * @param credentials The server credentials.
	 * @returns All settings for the specified server.
	 */
	const std::map<std::string, varconf::Variable>& getServerSettings(const Ember::Services::ServerSettingsCredentials& credentials);

	/**
	 * @brief Writes settings to disk.
	 *
	 * Call this whenever you've set any values to make sure that settings are stored.
	 * This method will also automatically be called when the service is shut down.
	 */
	void writeToDisk();
};

}

}

#endif /* EMBER_SERVICES_SERVERSETTINGS_H_ */
